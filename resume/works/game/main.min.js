var game = {
    data: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
    PLAYING: 1,
    GAME_OVER: 0,
    state: 1,
    score: 0,
    isFull: function () {
        for (var b = 0; b < game.data.length; b++) {
            for (var a = 0; a < game.data[b].length; a++) {
                if (game.data[b][a] == 0) {
                    return false
                }
            }
        }
        return true
    },
    randomNum: function () {
        if (!game.isFull()) {
            while (true) {
                var b = parseInt(Math.random() * 4);
                var a = parseInt(Math.random() * 4);
                var c = Math.random() < 0.5 ? 2 : 4;
                if (game.data[b][a] == 0) {
                    game.data[b][a] = c;
                    break
                }
            }
        }
    },
    start: function () {
        game.randomNum();
        game.randomNum();
        game.showView()
    },
    showView: function () {
        for (var c = 0; c < game.data.length; c++) {
            for (var a = 0; a < game.data[c].length; a++) {
                var e = document.querySelector("#fc" + c + a);
                var d = game.data[c][a];
                e.innerHTML = d == 0 ? "" : d;
                e.className = d == 0 ? "fcell" : "fcell n" + d;
                var b = document.querySelector("#score");
                b.innerHTML = this.score
            }
        }
    },
    moveLeft: function () {
        if (this.canLeft()) {
            for (var a = 0; a < 4; a++) {
                game.moveLeftInRow(a)
            }
            animation.start();
            setTimeout(function () {
                game.randomNum();
                game.showView()
            }, animation.interval * animation.times)
        }
    },
    moveLeftInRow: function (d) {
        var b = game.data[d];
        for (var c = 0; c < b.length - 1; c++) {
            var a = game.getLeftNext(d, c);
            if (a != -1) {
                if (b[c] == 0) {
                    b[c] = b[a];
                    animation.addTask("" + d + a, "" + d + c);
                    b[a] = 0;
                    c--
                } else {
                    if (b[c] == b[a]) {
                        b[c] += b[a];
                        animation.addTask("" + d + a, "" + d + c);
                        this.score += b[c];
                        b[a] = 0
                    }
                }
            }
        }
    },
    getLeftNext: function (c, d) {
        var a = game.data[c];
        for (var b = d + 1; b < 4; b++) {
            if (a[b] != 0) {
                return b
            }
        }
        return -1
    },
    moveRight: function () {
        if (this.canRight()) {
            for (var a = 0; a < this.data.length; a++) {
                this.moveRightInRow(a)
            }
            animation.start();
            setTimeout(function () {
                game.randomNum();
                game.showView()
            }, animation.interval * animation.times)
        }
    },
    moveRightInRow: function (d) {
        var b = game.data[d];
        for (var c = 3; c > 0; c--) {
            var a = game.getRightNext(d, c);
            if (a != -1) {
                if (b[c] == 0) {
                    b[c] = b[a];
                    animation.addTask("" + d + a, "" + d + c);
                    b[a] = 0;
                    c++
                } else {
                    if (b[c] == b[a]) {
                        b[c] += b[a];
                        animation.addTask("" + d + a, "" + d + c);
                        this.score += b[c];
                        b[a] = 0
                    }
                }
            }
        }
    },
    getRightNext: function (c, d) {
        var a = game.data[c];
        for (var b = d - 1; b >= 0; b--) {
            if (a[b] != 0) {
                return b
            }
        }
        return -1
    },
    moveUp: function () {
        if (this.canUp()) {
            for (var a = 0; a < 4; a++) {
                this.moveUpInCol(a)
            }
            animation.start();
            setTimeout(function () {
                game.randomNum();
                game.showView()
            }, animation.interval * animation.times)
        }
    },
    moveUpInCol: function (a) {
        for (var c = 0; c < 3; c++) {
            var b = this.getUpNext(a, c);
            if (b != -1) {
                if (this.data[c][a] == 0) {
                    this.data[c][a] = this.data[b][a];
                    animation.addTask("" + b + a, "" + c + a);
                    this.data[b][a] = 0;
                    c--
                } else {
                    if (this.data[c][a] == this.data[b][a]) {
                        this.data[c][a] += this.data[b][a];
                        animation.addTask("" + b + a, "" + c + a);
                        this.score += this.data[c][a];
                        this.data[b][a] = 0
                    }
                }
            }
        }
    },
    getUpNext: function (b, a) {
        for (var c = a + 1; c < 4; c++) {
            if (this.data[c][b] != 0) {
                return c
            }
        }
        return -1
    },
    moveDown: function () {
        if (this.canDown()) {
            for (var a = 0; a < 4; a++) {
                this.moveDownInCol(a)
            }
            animation.start();
            setTimeout(function () {
                game.randomNum();
                game.showView()
            }, animation.interval * animation.times)
        }
    },
    moveDownInCol: function (a) {
        for (var c = 3; c > 0; c--) {
            var b = this.getDownNext(a, c);
            if (b != -1) {
                if (this.data[c][a] == 0) {
                    this.data[c][a] = this.data[b][a];
                    animation.addTask("" + b + a, "" + c + a);
                    this.data[b][a] = 0;
                    c++
                } else {
                    if (this.data[c][a] == this.data[b][a]) {
                        this.data[c][a] += this.data[b][a];
                        animation.addTask("" + b + a, "" + c + a);
                        this.score += this.data[c][a];
                        this.data[b][a] = 0
                    }
                }
            }
        }
    },
    getDownNext: function (b, a) {
        for (var c = a - 1; c >= 0; c--) {
            if (this.data[c][b] != 0) {
                return c
            }
        }
        return -1
    },
    canLeft: function () {
        for (var b = 0; b < 4; b++) {
            for (var a = 1; a < this.data[b].length; a++) {
                if (this.data[b][a] != 0) {
                    if (this.data[b][a - 1] == 0) {
                        return true
                    } else {
                        if (this.data[b][a] == this.data[b][a - 1]) {
                            return true
                        }
                    }
                }
            }
        }
        return false
    },
    canRight: function () {
        for (var d = 0; d < this.data.length; d++) {
            for (var a = 0; a < this.data[d].length - 1; a++) {
                var c = this.data[d][a];
                var b = this.data[d][a + 1];
                if (c != 0) {
                    if (b == 0 || b == c) {
                        return true
                    }
                }
            }
        }
        return false
    },
    canUp: function () {
        for (var d = 1; d < this.data.length; d++) {
            for (var b = 0; b < this.data[d].length; b++) {
                var c = this.data[d][b];
                var a = this.data[d - 1][b];
                if (c != 0) {
                    if (a == 0 || a == c) {
                        return true
                    }
                }
            }
        }
        return false
    },
    canDown: function () {
        for (var c = 0; c < this.data.length - 1; c++) {
            for (var a = 0; a < this.data[c].length; a++) {
                var b = this.data[c][a];
                var d = this.data[c + 1][a];
                if (b != 0) {
                    if (d == 0 || d == b) {
                        return true
                    }
                }
            }
        }
        return false
    },
    gameOver: function () {
        if (!this.isFull()) {
            return false
        }
        for (var c = 0; c < this.data.length; c++) {
            for (var a = 0; a < this.data[c].length; a++) {
                var b = this.data[c][a];
                if (b == 8192) {
                    return true
                }
                if (c != 0) {
                    if (this.data[c - 1][a] == b) {
                        return false
                    }
                }
                if (c != 3) {
                    if (this.data[c + 1][a] == b) {
                        return false
                    }
                }
                if (a != 0) {
                    if (this.data[c][a - 1] == b) {
                        return false
                    }
                }
                if (a != 3) {
                    if (this.data[c][a + 1] == b) {
                        return false
                    }
                }
            }
        }
        return true
    },
    restart: function () {
        this.data = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
        this.state = 1;
        this.score = 0;
        var a = document.querySelector("#gameOver");
        a.style.display = "none";
        this.start()
    }
};